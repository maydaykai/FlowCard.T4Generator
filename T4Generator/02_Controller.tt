<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ include file="$(ProjectDir)00_DbHelper.ttinclude"  #>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//创建时间：<#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by mayday
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Web.Mvc;
using Service.IService;
using WebPage.Controllers;
using Common.JsonHelper;

namespace WebPage.Areas.CardManage.Controllers
{
<#
	var name = config.Name;
	var desc = config.Desc;
	var dbColumns = DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, config.TableName);
	var primaryKeyColumn = dbColumns.FirstOrDefault(o => o.IsPrimaryKey);
#>
	//<#=desc#>管理
	public class <#=name#>Controller : BaseController
    {
		I<#=name#>Manage <#=name#>Manage { get; set; }
        // GET: CardManage/<#=name#>
        /// <summary>
        /// 加载首页
        /// </summary>
        /// <returns></returns>
        [UserAuthorize(ModuleAlias = "<#=name#>", OperaAction = "View")]
        public ActionResult Index()
        {
            try
            {
                #region 处理查询参数
                ViewBag.Search = base.keywords;
                #endregion

                return View(BindList());
            }
            catch (Exception e)
            {
                WriteLog(Common.Enums.enumOperator.Select, "<#=desc#>管理加载主页：", e);
                throw e.InnerException;
            }

        }
		/// <summary>
        /// 加载详情信息
        /// </summary>
        [UserAuthorizeAttribute(ModuleAlias = "<#=name#>", OperaAction = "Detail")]
        public ActionResult Detail(string id)
        {
            try
            {
                var _entity = new Domain.<#=config.TableName#>();
                if (id != null && id != "")
                {
                    _entity = <#=name#>Manage.Get(p => p.<#=primaryKeyColumn.ColumnName#> == id);
                }

                return View(_entity);
            }
            catch (Exception e)
            {
                WriteLog(Common.Enums.enumOperator.Select, "加载<#=desc#>详情发生错误：", e);
                throw e.InnerException;
            }
        }
		/// <summary>
        /// 保存<#=desc#>基本信息
        /// </summary>
        [ValidateInput(false)]
        [UserAuthorizeAttribute(ModuleAlias = "<#=name#>", OperaAction = "Add,Edit")]
        public ActionResult Save(Domain.<#=config.TableName#> entity)
        {
            bool isEdit = false;
            var json = new JsonHelper() { Msg = "保存成功", Status = "n" };
            try
            {
				if (entity == null)                
                {
                    json.Msg = "未找到要操作的<#=desc#>记录";
                    return Json(json);
                }
                if (!string.IsNullOrEmpty(entity.<#=primaryKeyColumn.ColumnName#>)) //添加
                {
                    entity.<#=primaryKeyColumn.ColumnName#> = Guid.NewGuid().ToString("N");
                    entity.UserId = this.CurrentUser.Id.ToString();
                    entity.CreateTime = DateTime.Now;
                    entity.LastUpdate = DateTime.Now;
                }
                else //修改
                {
                    entity.UserId = this.CurrentUser.Id.ToString();
                    entity.LastUpdate = DateTime.Now;
                    isEdit = true;
                }
                //检测此用户名是否重复
                //if (!this.RegularDinnerManage.IsExist(p => p.Name.Equals(entity.Name) && p.RegularDinnerId != entity.RegularDinnerId))
                //{
                    //this.RegularDinnerManage.SaveOrUpdate(entity, isEdit);
                    //json.Status = "y";
                //}
                //else
                //{
                    //json.Msg = "<#=desc#>名称已被使用，请修改后再提交!";
                //}
                if (isEdit)
                {
                    WriteLog(Common.Enums.enumOperator.Edit, "修改<#=desc#>，结果：" + json.Msg, Common.Enums.enumLog4net.INFO);
                }
                else
                {
                    WriteLog(Common.Enums.enumOperator.Add, "添加<#=desc#>，结果：" + json.Msg, Common.Enums.enumLog4net.INFO);
                }
            }
            catch (Exception e)
            {
                json.Msg = "保存<#=desc#>信息发生内部错误！";
                WriteLog(Common.Enums.enumOperator.None, "保存<#=desc#>错误：", e);
            }
            return Json(json);
        }
		/// <summary>
        /// 分页查询<#=desc#>列表
        /// </summary>
        private Common.PageInfo BindList()
        {
            //基础数据
            var query = this.<#=name#>Manage.LoadAll(null);

            //部门(本部门用户及所有下级部门用户)
            //if (!string.IsNullOrEmpty(DepartId))
            //{
                //var childDepart = this.DepartmentManage.LoadAll(p => p.PARENTID == DepartId).Select(p => p.ID).ToList();
                //query = query.Where(p => p.DPTID == DepartId || childDepart.Any(e => e == p.DPTID));
            //}

            //查询关键字
            //if (!string.IsNullOrEmpty(keywords))
            //{
                //keywords = keywords.ToLower();
                //query = query.Where(p => p.NAME.Contains(keywords) || p.ACCOUNT.Contains(keywords) || p.PINYIN2.Contains(keywords) || p.PINYIN1.Contains(keywords));
            //}
            //排序
            query = query.OrderByDescending(p => p.LastUpdate);
            //分页
            var result = this.<#=name#>Manage.Query(query, page, pagesize);

            var list = result.List.Select(p => new
            {
                <#	foreach(DbColumn column in dbColumns){#>
					p.<#=column.ColumnName#>,
				<#}#>
			}).ToList();

            return new Common.PageInfo(result.Index, result.PageSize, result.Count, JsonConverter.JsonClass(list));
        }
    }
}